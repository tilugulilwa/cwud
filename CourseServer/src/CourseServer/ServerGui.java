
package CourseServer;

import CourseImplementation.CourseImplementation;
import helper.Calender;
import helper.Settings;
import helper.StudentView;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.shape.Path;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;



  class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text documents (*.csv)";
        }
    } 



public class ServerGui extends javax.swing.JFrame {

    /**
     * Creates new form ServerGui
     */
    public ServerGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        jtFilePath = new javax.swing.JTextField();
        jbVerify = new javax.swing.JButton();
        jbLoad = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        JlabelStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Course Work Server");

        textarea.setEditable(false);
        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        jtFilePath.setEditable(false);

        jbVerify.setText("Verify");
        jbVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerifyActionPerformed(evt);
            }
        });

        jbLoad.setText("Load data");
        jbLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoadActionPerformed(evt);
            }
        });

        jLabel1.setText("File path - >");

        JlabelStatus.setBackground(new java.awt.Color(204, 255, 102));
        JlabelStatus.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 14)); // NOI18N
        JlabelStatus.setForeground(new java.awt.Color(51, 102, 255));
        JlabelStatus.setText("Server is running ........");

        jMenu1.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jbVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jbLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(322, 322, 322)
                .addComponent(JlabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbVerify)
                    .addComponent(jbLoad)
                    .addComponent(jLabel1))
                .addGap(67, 67, 67)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JlabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
              // What to do with the file, e.g. display it in a TextArea
              textarea.read( new FileReader( file.getAbsolutePath() ), null );
              this.jtFilePath.setText(file.getAbsolutePath());
            } catch (IOException ex) {
              System.out.println("problem accessing file"+file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0); 
    }//GEN-LAST:event_ExitActionPerformed

    private void jbVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerifyActionPerformed
        String line;
        String splitBy = ",";  
        int verifier[] = null;
        int base = 0;
        int year = 0;
        int semester = 0;
        //System.out.println(this.jtFilePath.getText());
        
        if (this.jtFilePath.getText().isEmpty()){
            //System.out.println("Please choose a file !!");
            JOptionPane.showMessageDialog(this, "Please choose a file !!");
            
        }else{
        
        
        try{
            BufferedReader br = new BufferedReader(new FileReader(this.jtFilePath.getText())); 
            int iterator = 1;
            String field = null;
            
            //if ((br.readLine()) == null) System.out.println("\n ################# \n This is an empty file \n ################");
            
            /**
             * This loop below iterates through each line in a file
             * Its first checks line 1 - 4 for validity
             */
            
                      
            while ((line = br.readLine()) != null)   //returns a Boolean value  
            {  
                String[] result = line.split(splitBy);    // use comma as separator  

                if (iterator == 1) {
  
                    iterator++;
                    //Capture base

                    System.out.println(result[0]);
                    if ((result[0]).equals("base") ){
                       base = Integer.parseInt(result[1]);                    
                        continue; 
                    }else{

                        JOptionPane.showMessageDialog(this, "'Base' tag not found !!");
                        break;
                    }
                }
                
                if (iterator == 2) {

                    iterator++;
                    //Capture year
                    if ((result[0]).equals("year") ){
                       year = Integer.parseInt(result[1]);                    
                        continue; 
                    }else{
                
                        JOptionPane.showMessageDialog(this, "'Year' tag not found !!");
                        break;
                    }

                }
                
                if (iterator == 3) {
                    iterator++;
                    //Capture semester
                    if ((result[0]).equals("semester") ){
                       semester = Integer.parseInt(result[1]);  
                       
                       // Before continuing make a db call to verify base, year & semester
                       
                        continue; 
                    }else{
                        
                         JOptionPane.showMessageDialog(this, "'Semester' tag not found !! ");
                        break;
                    }

                }
                
                if (iterator == 4) {
                    iterator++;
                    
                    File f1 = new File(this.jtFilePath.getText());
                    String filename = f1.getName();   

                    String[] cname = filename.split("\\.");
                    
                    filename = cname[0];

                    CourseImplementation co = new CourseImplementation();  
                       
                    if (co.verify(filename)){                        
                        
                        JOptionPane.showMessageDialog(this, "Correct file or course loaded ");
                        //continue;                                                
                    }else{                        
                        
                        JOptionPane.showMessageDialog(this, "Wrong course or file !! ");
                        break;
                    }
                    
                    Calender cal = new Calender();                  
                    if (cal.verify(year,semester)){                        
                       
                        JOptionPane.showMessageDialog(this, "Valid Year & Semester found!! ");
                        Settings.verified = 1;
                        
                        Settings.gCourseCode = filename;
                        Settings.gYear = year;
                        Settings.gSemester = semester;
                        
                        
                        continue;                                                
                    }else{                        
                       
                        JOptionPane.showMessageDialog(this, "Invalid Year or Semester!");
                        break;
                    }
                    
                    
                   
                }
                
                if ((result.length ==8)){
                                             
                    System.out.println( result[0] + "\t\t" + result[1] + "\t\t" 
                        + result[2] + "\t" + result[3] + "\t " + result[4] + "\t " + result[5] 
                                + "\t " + result[6]  );  
                }
                
                
            }  
            
            if (((br.readLine()) == null)&&(iterator==1)) JOptionPane.showMessageDialog(this, "This is an empty file !!!");
            
        }catch(Exception e){
            e.printStackTrace();
        }
        }
            
    }//GEN-LAST:event_jbVerifyActionPerformed

    private void jbLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadActionPerformed
        // TODO add your handling code here:
        String line = null;
        
        if (Settings.verified==0) {
            JOptionPane.showMessageDialog(this, "Please verify this file first !!");
        }else{
            
            try{
                CourseImplementation objCourse = new CourseImplementation();
                BufferedReader br = new BufferedReader(new FileReader(this.jtFilePath.getText())); 
                /**
                 * Iterate through first 4 lines before starting to insert.
                 */
                for (int i=0; i<4; i++){
                    br.readLine();
                }
                
                
                if(objCourse.isSemesterActive(Settings.gYear, Settings.gSemester)){
                objCourse.clearRecords(Settings.gCourseCode,Settings.gYear,Settings.gSemester);
                
                while ((line = br.readLine()) != null)   //returns a Boolean value  
                {  
                    String[] result = line.split(Settings.splitBy);    // use comma as separator 
                    
                    	int test1Score = Integer.parseInt(result[2].trim());
                        int test2Score = Integer.parseInt(result[3].trim());
                        int assignment1Score = Integer.parseInt(result[4].trim());                        
                        int assignment2score = Integer.parseInt(result[5].trim());
                        int presentationScore = Integer.parseInt(result[6].trim());
                        String registrationNumber = result[0].trim();                     
                        
                    
                        objCourse.loadCourseWork(registrationNumber, Settings.gCourseCode,Settings.gYear,
                                Settings.gSemester,test1Score, test2Score, assignment1Score, 
                                assignment2score, presentationScore);
                }
                
                Settings.verified = 0;
                JOptionPane.showMessageDialog(this, "File loaded successful !!!");                    
                }else{
                    JOptionPane.showMessageDialog(this, "Error, trying to load inactive semester \n Year :"+Settings.gYear+" \n Semester :"+Settings.gSemester+"!!!");  
                }
                       


                
            }catch (Exception e){
                e.printStackTrace();
            }
            
            
            
        }
        
        
    }//GEN-LAST:event_jbLoadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
        /**
         * Edited to add RMI Server start
         */
        
        try{
            Registry reg = LocateRegistry.createRegistry(1099);
            CourseImplementation c = new CourseImplementation();
            reg.bind("results", c);         
            //System.out.println("Server is running .....");
            String status = "Server is runnig ...";
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerGui().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JLabel JlabelStatus;
    private javax.swing.JMenuItem Open;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbLoad;
    private javax.swing.JButton jbVerify;
    private javax.swing.JTextField jtFilePath;
    private javax.swing.JTextArea textarea;
    // End of variables declaration//GEN-END:variables
}
